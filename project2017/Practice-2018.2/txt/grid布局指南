网格容器：
    当一个元素设置display：grid属性时，他就会成为所有网格项（grid Items）的父元素。在下面的示例中，container就是网格容器
    <div class="container">
        <div class="item item-1"></div>
        <div class="item item-1"></div>
        <div class="item item-1"></div>
    </div>

网格项（Grid Item）
    网格容器的孩子（e.g. 子元素） 这里item元素都是网格项，但是sub-item不会包含其中。
    <div class="container">
        <div class="item"></div>
        <div class="item">
            <p class="sub-item"></p>
        </div>
        <div class="item"></div>
    </div>

网格线（Grid Line)
    分界线构成了网格的结构。他们可以是垂直的（“列网格线”）也可以是水平的（“行网格线”），并且存在于一行或一列的任一侧。下面图片中的黄线就是列网格线的一个例子。

网格轨道（Grid Track)
    两个相邻网格线之间的空间。你可以吧它们想象成网格的行或列。下图所示的是第二行个第三行网格线之间的网格轨道。

网格单元格（Grid Cell）
    两个相邻的行和两个相邻的列之间的网格线空间。它是网格的一个“单位”。下面图片所示的是行网格线1和2与列网格线2和3之间的网格单元格。

网格区域（Grid Area）
    四条网格线所包围的所有空间。网格区域可由任意数量的网格单元格组成。下面图片所示的是行网格线1和3和列网格线1和3之间的网格区域。

网格容器属性（Grid Container）
    display
    定义一个元素成为网格容器，并对其内容建立一个网格格式的上下文。
    属性值：
        grid:产生一个块级的网格
        inline-grid:产生内联级网格
    .container{
        display:grid|inline-grid
    }
    注：column,float,clear和vertical-align元素对网格容器不起作用。

    grid-template-rows
    利用以空格分隔的值定义网格的行和列。值的大小代表轨道的大小，并且它们之间的空格表示网格线。
    属性值：
        <track-size>:可以是一个长度、百分比或者是一个网格中自由空间的一小部分（使用fr单位）
        <line-name>:你选择任意名称
        subgrid - 如果你的网格容器本身就是一个网格项（即嵌套网格），你可以使用此属性指定行和列的大小继承与父元素而不是自身指定
    .container{
        grid-template-columns:<track-size>...|<line-name><track-size>...|subgrid;
        grid-tempplate-rows:<track-size>...|<line-name><reack-size>...|subgrid;
    }
    示例：
        当你在值之间留有空格的时候，网格线就会自动分配数值名称：
        .container{
            grid-template-columns: 40px 50px auto 50px 40px;
            grid-template-rows: 25% 100px auto;
        }

    但是你也可以显示命名，请参考下面括号语法中的名称命名方式：
    .container{
        grid-template-columns:[first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end];
        grid-template-rows:[row1-start] 25% [row1-end] 100% [third-line] auto [last-line];
    }

    请注意，一条网格线可以具有多个名称，例如，这里的第二行将有两个名字：row1-end 和 row2-start:
    .container{
        grid-template-rows:[row1-start] 25% [row1-end row2-start] 25% [row2-end]
    }
    如果你的定义中包含重复的部分，你可以使用repeat()表示法进行精简：
    .container{
        grid-template-columns:repeat(3, 20px [col-start]) 5%;
    }
    等效于：
    .container{
        grid-template-columns:20px [col-start] 20px [col-start] 20px [col-start] 5%;
    }

    fr单位允许你将一个轨道大小设置为网格容器内自由空间的一小部分。如下所示，每个网格项就会占据网格容器宽度的三分之一：
    .container{
        grid-template-columns:1fr 1fr 1fr;
    }
    这里自由空间表示除去非弹性项以后剩余的空间。在此示例中的fr单位的可用空间表示减去50px以后的空间大小：
    .container{
        grid-template-columns:1fr 50px 1fr 1fr;
    }

grid-template-areas
    使用grid-area属性定义网格区域名称，从而定义了网络模板。网络区域重复的名称就会导致内容跨越这些单元格。句点表示一个空单元格。语法本身提供了一种可视化的网络结构。
    属性值：
        <grid-area-name>:使用grid-area属性定义的网格区域名称
        .：句点表示一个空单元格
        none:无网格区域被定义

        .container{
            grid-template-areas:"<grid-area-name>|.|none|..."
                "..."
        }
        示例：
        .item-a{
            grid-area:header;
        }
        .item-b{
            grid-area:main;
        }
        .item-a{
            grid-area:sidebar;
        }
        .item-a{
            grid-area:footer;
        }
        .container{
            grid-template-columns:50px 50px 50px 50px;
            grid-template-rows:auto;
            grid-template-areas:"header header header header"
                                "main main . sidebar"
                                "footer footer footer footer"
        }
        这将创建一个四列三行的网格。最上面的一行为header区域。中间一行由两个main区域，一个空单元格和一个sidebar区域。最后一行是footer区域。
        你所声明的每一行都需要具有相同数目的单元格。
        你可以使用任意数量的句点（.）声明单个空单元格。只要句点之间没有空格就表示一个空单元格。
        注意，你只是使用此语法进行网格区域命名，而不是网格线命名。当你使用此语法时，区域两边的线就会得到自动命名。如果网格区域名称为foo，则其行线和列线的名称就将会为foo-strat,最后一行线及其最后一列线的名字就会为foo-end。这意味着一些线就可能具有多个名称，如上面示例中所示，拥有三个名称：header-start,main-start,以及footer-start.

grid-conlumn-gap和grid-row-gap
    指定网格线的大小。你可以把他想象成在行/列之间设置间距宽度。
    属性值：
        <line-size>：一个长度值
    .container{
        grid-column-gap:<line-size>;
        grid-row-gap:<line-size>;
    }
    示例：
    .container{
        grid-template-columns:100px 50px 100px;
        grid-template-row:80px auto 80px;
        grid-column-gap:10px;
        grid-row-gap:15px;
    }
    间距仅仅在行/列之间产生，而不会在边缘区。

grid-gap
    grid-column-gap和grid-row-gap的简写值
    属性值：
        <grid-column-gap><grid-row-gap>:长度值
    .container{
        grid-gap:<grid-column-gap><grid-row-gap>;
    }
    示例：
    .container{
        grid-template-columns:100px 50px 100px;
        grid-template-rows:80px auto 80px;
        grid-gap:10px 50px;
    }
    如果没有指定grid-row-gap属性的值，默认与grid-column-gap属性值相同

justify-items
    沿列轴对齐网格项中的内容（相反于align-item属性定义的沿行轴对齐）。此职适用于容器内所有的网格项。
    属性值：
        start:内容与网格区域的左端对齐
        end:内容与网格区域的右端对齐
        center:内容处于网格区域的中间位置
        stretch:内容宽度占据整个网格区域空间（默认值）
    .container{
        justify-items:start | end | center | stretch;
    }
    示例：
    .container{
        justify-items:start;
    }
    .container{
        justify-items:end;
    }
    .container{
        justify-items:center;
    }
    .container{
        justify-items:stretch;
    }
    这个也可以使用justify-self属性对各网格项进行设置

align-items
    沿行轴对齐网格项中的内容（相反于justify-item属性定义的沿列轴对齐）。此职适用于容器内所有的网格项。
    属性值：
        start:内容与网格区域的顶端对齐
        end:内容与网格区域的底部对齐
        center:内容处于网格区域的中间位置
        stretch:内容高度占据整个网格区域空间（默认值）
    .container{
        align-items:start | end | center | stretch;
    }
    示例：
    .container{
        align-items:start;
    }
    .container{
        align-items:end;
    }
    .container{
        align-items:center;
    }
    .container{
        align-items:stretch;
    }
    这个也可以使用align-self属性对各网格项进行设置

justify-content
    当你使用px这种非响应式的单位对你的网格项进行大小设置时，就有可能出现一种情况--你的网格大小可能小于其网络容器的大小。在这种情况下，你就可以设置网格容器内网格的对齐方式。此属性会将网格沿列轴进行对齐（相反于align-content属性定义的沿轴对齐）。
    属性值：
        start:网格与网格容器的左端对齐
        end：网格与网格容器的右端对齐
        center：网格处于网格容器的中间
        stretch:调整网格项的大小，使其宽度填充整个网格容器
        space-around:在网格项之间设置偶数个空格间隙，其最边缘间隙大小为中间空格间隙大小的一半
        space-between:在网格项之间设置偶数个空格间隙，其最边缘不存在空格间隙
        space-evenly:在网格项之间设置偶数个空格间隙，同样适用于最边缘区域
    .container{
        justify-content:start | end | center | stretch | space-around | space-between | space-evenly;
    }
    示例：
    .container{
        justify-content:start;
    }
    .container{
        justify-content:end;
    }
    .container{
        justify-content:center;
    }
    .container{
        justify-content:stretch;
    }
    .container{
        justify-content:space-around;
    }
    .container{
        justify-content:space-between;
    }
    .container{
        justify-content:space-evenly;
    }

align-content
    当你使用px这种非响应式的单位对你的网格项进行大小设置时，就有可能出现一种情况--你的网格大小可能小于其网络容器的大小。在这种情况下，你就可以设置网格容器内网格的对齐方式。此属性会将网格沿行轴进行对齐（相反于justify-content属性定义的沿轴对齐）。
    属性值：
        start:网格与网格容器的顶端对齐
        end：网格与网格容器的底部对齐
        center：网格处于网格容器的中间
        stretch:调整网格项的大小，使其宽度填充整个网格容器
        space-around:在网格项之间设置偶数个空格间隙，其最边缘间隙大小为中间空格间隙大小的一半
        space-between:在网格项之间设置偶数个空格间隙，其最边缘不存在空格间隙
        space-evenly:在网格项之间设置偶数个空格间隙，同样适用于最边缘区域
    .container{
        align-content:start | end | center | stretch | space-around | space-between | space-evenly;
    }
    示例：
    .container{
        align-content:start;
    }
    .container{
        align-content:end;
    }
    .container{
        align-content:center;
    }
    .container{
        align-content:stretch;
    }
    .container{
        align-content:space-around;
    }
    .container{
        align-content:space-between;
    }
    .container{
        align-content:space-evenly;
    }

grid-auto-columns和grid-auto-rows
    指定任何自动生成的网格轨道(隐式网格跟踪)的大小。当你显式定位行或列(使用 grid-template-rows/grid-template-columns属性)时,就会产生超出定义范围内的隐式网格轨道。
    属性值:
        <track-siz>: 可以是长度、 百分比或网格自由空间的一小部分(使用fr单位)
    .container{
        grid-auto-columns: <track-size> ...;
        grid-auto-rows: <track-size> ...;
    }

    为了说明隐式网格轨道是如何被创造出来的，请思考如下代码:
    .container{
        grid-template-columns: 60px 60px;
        grid-template-rows: 90px 90px
    }
    但是现在你想象你使用grid-column 和 grid-row 来定位网格项，如下所示:
    .item-a{
        grid-column: 1 / 2;
        grid-row: 2 / 3;
    }
    .item-b{
        grid-column: 5 / 6;
        grid-row: 2 / 3;
    }

    这里我们定义.item b开始于列线 5 并结束于在列线 6，但是我们从来没有定义列线 5 或 6。因为我们引用不存在的线，宽度为0的隐式轨道的就会被创建用来填补空白。我们可以使用grid-auto-columns 和 grid-auto-rows属性来设置这些隐式轨道的宽度:
    .container{
        grid-auto-columns: 60px;
    }

grid-auto-flow
    如果你不显式的在网格中放置网格项，自动布局算法就会自动踢出此网格项。此属性用来控制自动布局算法的工作原理。
    属性值:
        row: 告诉自动布局算法填充每一行，必要时添加新行
        column: 告诉自动布局算法填充每一列，必要时添加新列
        dense: 告诉自动布局算法试图填补网格中之前较小的网格项留有的空白
    .container{
        grid-auto-flow: row | column | row dense | column dense
    }
    注意:dense值可能会导致更改网格项的顺序。
    示例:
        <section class="container">
            <div class="item-a">item-a</div>
            <div class="item-b">item-b</div>
            <div class="item-c">item-c</div>
            <div class="item-d">item-d</div>
            <div class="item-e">item-e</div>
        </section>
        这里定义了一个两列五行的网格，并将 grid-auto-flow属性设置为row(即默认值):
        .container{
            display: grid;
            grid-template-columns: 60px 60px 60px 60px 60px;
            grid-template-rows: 30px 30px;
            grid-auto-flow: row;
        }
        将网格项放置在网格中时只需要其中的两个网格项:
        .item-a{
            grid-column: 1;
            grid-row: 1 / 3;
        }
        .item-e{
            grid-column: 5;
            grid-row: 1 / 3;
        }
        因为我们将grid-auto-flow属性设置为了row，所以我们的网格看起来会像这个样子。注意我们我们没有对其进行设置的三个网格项(item-b, item-c and item-d),会沿行轴进行布局。
        如果我们将grid-auto-flow属性设置为 column,item-b, item-c 和 item-d 就会沿列轴进行布局。
        .container{
            display: grid;
            grid-template-columns: 60px 60px 60px 60px 60px;
            grid-template-rows: 30px 30px;
            grid-auto-flow: column;
        }
